.TH MKNEMO 8NEMO "22 December 2019"
.SH NAME
mknemo \- attempt to find NEMO (and related) programs and install them
.SH SYNOPSIS
.PP
\fBmknemo \fIprogram(s)\fP 
.SH DESCRIPTION
\fImknemo\fP attempts to find the source code of the program(s)
specified on the command line, and tries to compile them.
If successfull, the binary will be placed in \fB$NEMOBIN\fP.
Add the '-u' flag if your NEMO is under git control, so you can
force an update before the build.
.PP
Finding the method how to install \fIprogram\fP takes several paths:
.PP
First, if a file \fI$NEMO/src/scripts/mknemo.d/program\fP exists,
it is assumed to be a shell script with directions how to install this
program. \fPgyrfalcON\fP is an example of such a complex program. In
this case \fIprogram\fP can also be a package name, in which case
the script will be more complex.
.PP
Next, within the $NEMO/src (optionally also the $NEMO/usr tree) a
source file \fIprogram.c\fP (or C++ or Fortran) is looked for, which is
compiled with a local \fBMakefile\fP (or a template
if none is available).  \fItsf\fP is an example of this type of
program, but also more specialized plotting programs
such as \fIsnapplot\fP or \fIorboom\fP, which need
an extra 3rd party library.
.PP
Finally, if still no source code is found,
a directory with the name \fIprogram\fP is searched for, 
and a local Makefile is then used to install the \fIprogram\fP.
\fBhackcode1\fP is an example of this type of program.
.SH "OPTIONS"
.nf
  -c CODE   search for CODE.c to set the directory for target(s)
  -n N      selection of N-th element from unresolved list [1]
  -s DIR    root directory to start search [$NEMO/src]
  -r        remove lockfile before starting
  -d        also make doc file (only for true NEMO programs)
  -t        cleanup after having made the binaries
  -T        cleanup before making the binaries
  -u        update your NEMO git tree before (re)making
  -l        recompile the library before (re)making 
  -g        use gmake, instead of make
  -a        also search $NEMO/usr 
  -v        more verbose, it will report version and cvsid of program (deprecated)
  -D        show special projects from the mknemo.d directory
.fi
.SH MAKEDEFS
All compile flags and libraries that are used should have been configured in the $NEMOLIB/makedefs file.
Here are some critical programs that you could use to test if that specific library was properly referenced
in makedefs:
.nf
.ta +2i
heated_plate_openmp	openmp
cfitsio	        	sdfits  (no test data present in NEMO)
fftw	        	-
gsl	        	-
hdf4	        	tsd (no test data present in NEMO) - hdf.h
hdf5	        	orboom eaglesnap (but needs install in $NEMO/usr/eagle)
miriad	        	-
pgplot	        	via YAPP_PGPLOT
plplot	          	via YAPP_PLPLOT
png	         	via YAPP_PGPLOT
yapp	        	tabhist
.fi
If any of these fail for obvious reasons,
you can try and fix them by rerunning configure and comparing
$NEMOLIB/makedefs with $NEMO/makedefs, or simply editing $NEMOLIB/makedefs directly.
.SH EXAMPLES
Here are some examples of the non-default control files in $NEMO/src/scripts/mknemo.d:
.nf 
.ta +2i
firstn    	the very first (?) nbody code
glnemo2   	glnemo graphics
gyrfalcON   	falcON tools (gyrfalcON, mkplum, the acc's and manip's)
rotcur    	rotcur program (there is also a confusing rotcur \fIpotential(5NEMO)\fP)
galaxy15	Sellwood's GALAXY V15.x
.fi
.SH "SEE ALSO"
bake(8NEMO), mkbin(8NEMO)
.SH AUTHOR
Peter Teuben
.SH FILES
.nf
.ta +3.0i
$NEMO/src/scripts/mknemo.d	directory with non-default control files for mknemo
$NEMO/src/scripts/template	NEMO program template generator
$NEMO/src/scripts/mkman		NEMO man page template generator
$NEMOLIB/makedefs	make variables
./LocalMakedef		optional override makedefs
$NEMOLIB/libnemo.a	main NEMO library
$NEMOLIB/yapp*.o	various device drivers
$NEMO/src          	source tree searched for programs/directories
$NEMO/adm/install/mknemo.log	logfile of all previous installs done
$NEMO/adm/install/mknemo.lock	lockfile, to prevent multiple usage
.fi
.SH "UPDATE HISTORY"
.nf
.ta +1i +4i
21-jun-91	V1.0: doc created       	PJT
25-jun-91	V1.1: added lockfile     	PJT
4-apr-01	V1.3: added extension making for NEMO V3	PJT
20-jun-03	V1.4: added -u flag	PJT
16-dec-03	V1.5: added -l flag, also cloned sbin/mkstarlab	PJT
11-jun-04	V2.4: added -a flag	PJT
11-apr-2019	V4.0: git based
dec-2019	document critical binaries	PJT
.fi

